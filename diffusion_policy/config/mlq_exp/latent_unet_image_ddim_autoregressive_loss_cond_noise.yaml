defaults:
  - _self_
  - task: pusht_image_world_model

name: latent_autoregressive_loss_less_downsample_cond_noise_future_10
_target_: diffusion_policy.workspace.train_diffusion_world_model_unet_image_workspace.TrainDiffusionWorldModelUnetImageWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

n_obs_steps: 4
n_future_steps: 8
horizon: ${eval:'${n_obs_steps}+${n_future_steps}'}
dataset_obs_steps: ${n_obs_steps}
obs_as_global_cond: True

world_model:
  _target_: diffusion_policy.world_model.diffusion_world_model_latent_unet_image.DiffusionWorldModelImageLatentUnet

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 10
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: False # required when predict_epsilon=False
    prediction_type: sample # or sample

  auto_encoder:
    _target_: diffusion_policy.model.equi.general_autoencoder.Autoencoder
    obs_channels: 3
    lats_channels: 1
    encoder_channels: [64, 64, 64, 64]
    decoder_channels: [64, 64, 64, 64]
    l2_loss_weight: 0.0
    latent_noise_std: 0.01
    latent_norm_regularization_r: 1.0
    latent_norm_regularization_weight: 0.005
  pretrained_auto_encoder_path: /home/lma326/diffusion_world_model/data/outputs/autoencoder/train_autoencoder_96_to_12_norm_reg_add_noise/checkpoints/epoch=0420-val_loss=0.003.ckpt

  n_obs_steps: ${n_obs_steps}
  n_future_steps: ${n_future_steps}
  num_inference_steps: 10
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  cond_channels: 128
  depths: [4,4]
  channels: [64,64]
  attn_depths: [0,0]
  l1_loss_weight: 0.0
  cond_latent_noise_std: 0.002

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 32
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 32
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 500
  autoregressive_training_begin_epoch: 50
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 20
  num_rollouts: 3
  checkpoint_every: 20
  val_every: 5
  sample_every: 1
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_world_model
  resume: True
  mode: online
  name: ${name}_${now:%Y.%m.%d-%H.%M.%S}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: latent_unet_image

checkpoint:
  topk:
    monitor_key: val_loss
    mode: min
    k: 5
    format_str: 'epoch={epoch:04d}-val_loss={val_loss:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/latent_unet_image/${name}
  sweep:
    dir: data/outputs/latent_unet_image/${name}
    subdir: ${hydra.job.num}
